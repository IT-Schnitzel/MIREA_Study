#include <iostream>
#include <bitset>
#include <cstdlib>
#include <Windows.h>
#include <fstream>
#include <vector>
#include <chrono>

using namespace std;

void setBit(vector<unsigned char>& bitArray, int number) {
    bitArray[number / 8] |= (1 << (number % 8));
}

// Функция для проверки, установлен ли бит
bool isBitSet(const vector<unsigned char>& bitArray, int number) {
    return (bitArray[number / 8] & (1 << (number % 8))) != 0;
}


int main() {

    setlocale(LC_ALL, "Russian");


    //Задание_1_а
    unsigned char x = 255; //1  127 128 //8-разрядное двоичное число 11111111
    unsigned char maska = 1; //1=00000001 – 8-разрядная маска
    x = x & (~(maska << 4)); //результат x=239
    cout << static_cast<int>(x) << endl; //" (в двоичном виде: " << std::bitset<8>(x) << ")\n";

    //Задание_1_б
    unsigned char y = 255; // число
    unsigned char mask = 1; // 00000001
    y = y | (mask << 6); // Установка 7-го бита в 1
    cout << static_cast<int>(y) << endl;

    //Задание 1_в
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    unsigned int x1 = 25;
    const int n = sizeof(int) * 8; //=32 количество разрядов в числе типа int 
    unsigned maskan = (1 << (n- 1)); //1 в старшем бите 32-разрядной сетки 
    cout << "Начальный вид маски: " << bitset<n>(maskan) << endl; cout << "Результат: " << endl;
    for (int i = 1; i <= n; i++) { //32 раза по количеству разрядов:
        cout << ((x1 & maskan) >> (n - i)); 
        maskan = maskan >> 1; //смещение 1 в маске на разряд влево
    } 
    cout << endl;
    system("pause"); 


    //Задание 2_а
    vector<int> numbers; // вектор для хранения введенных чисел
    unsigned char bitset = 0; // битовое представление в виде беззнакового числа
    cout << "Введите до 8 чисел от 0 до 7 (ввод завершите -1):" << endl;
    int num;
    while (cin >> num && num != -1) {
        if (num >= 0 && num <= 7 && numbers.size() < 8) {
            numbers.push_back(num);
            bitset |= (1 << num); // установка соответствующего бита
        }
        else {
            cout << "Число должно быть от 0 до 7 и количество не должно превышать 8." << endl;
        }
    }
    // Вывод отсортированного массива
    cout << "Исходный набор чисел в отсортированном виде: ";
    for (int i = 0; i < 8; ++i) {
        if (bitset & (1 << i)) {
            cout << i << " ";
        }
    }
    cout << endl;



    //Задание 2_б
    vector<int> numbers1;  // вектор для хранения введенных чисел
    unsigned long long bitset1 = 0; // битовое представление

    cout << "Введите до 64 чисел от 0 до 63 (ввод завершите -1):" << endl;
    int num1;
    while (cin >> num1 && num1 != -1) {
        if (num1 >= 0 && num1 <= 63 && numbers1.size() < 64) {
            numbers1.push_back(num1);
            bitset1 |= (1ULL << num1); // установка соответствующего бита
        }
        else {
            cout << "Число должно быть от 0 до 63 и количество не должно превышать 64." << endl;
        }
    }

    // Вывод отсортированного массива
    cout << "Исходный набор чисел в отсортированном виде: ";
    for (int i = 0; i < 64; ++i) {
        if (bitset1 & (1ULL << i)) {
            cout << i << " ";
        }
    }
    cout << endl;



    //Задание 2_в
    const int NUM_ELEMENTS = 64;
    vector<int> numbers2; // вектор для хранения введенных чисел
    vector<unsigned char> bitset2((NUM_ELEMENTS + 7) / 8, 0); // битовый массив в виде вектора

    cout << "Введите до 64 чисел от 0 до 63 (ввод завершите -1):" << endl;
    int num2;
    while (cin >> num2 && num2 != -1) {
        if (num2 >= 0 && num2 < NUM_ELEMENTS && numbers2.size() < NUM_ELEMENTS) {
            numbers2.push_back(num2);
            bitset2[num2/8] |= (1 << (num2 % 8)); // установка соответствующего бита
        }
        else {
            cout << "Число должно быть от 0 до 63 и количество не должно превышать 64." << endl;
        }
    }

    // Вывод отсортированного массива
    cout << "Исходный набор чисел в отсортированном виде: ";
    for (int i = 0; i < NUM_ELEMENTS; ++i) {
        if (bitset2[i / 8] & (1 << (i % 8))) {
            cout << i << " ";
        }
    }
    cout << endl;





    cout << "T3" << endl;
    //Задание 3
    const int MAX_NUMBERS = 10000000;
    const int BIT_ARRAY_BYTES = (MAX_NUMBERS + 7) / 8;
    vector<unsigned char> bitArray(BIT_ARRAY_BYTES, 0); // Инициализируем битовый массив нулями
    auto startTime = chrono::high_resolution_clock::now();     // Начинаем отсчет времени выполнения
    ifstream inputFile("unique_numbers.txt");     // Открываем входной файл для чтения
    if (!inputFile) {
        cerr << "Ошибка: не удалось открыть входной файл!" << endl;
        return 1;
    }
    int number;
    while (inputFile >> number) {
        // Проверяем, что число находится в допустимом диапазоне
        if (number >= 0 && number < MAX_NUMBERS) {
            setBit(bitArray, number);  // Устанавливаем бит в массиве
        }
    }
    inputFile.close();  // Закрываем файл после чтения
    ofstream outputFile("output.txt"); // Открываем выходной файл для записи
    if (!outputFile) { 
        cerr << "Ошибка: не удалось создать выходной файл!" << endl;
        return 1;
    }
    
    for (int i = 0; i < MAX_NUMBERS; ++i) { // Записываем отсортированные числа в выходной файл
        if (isBitSet(bitArray, i)) {
            outputFile << i << endl;
        }
    }
    outputFile.close();  // Закрываем файл после записи
    // Завершаем отсчет времени выполнения
    auto endTime = chrono::high_resolution_clock::now();
    chrono::duration<double> elapsedTime = endTime - startTime;

    // Выводим результаты
    cout << "Время работы программы: " << elapsedTime.count() << " секунд" << endl;
    cout << "Объем памяти для битового массива: " << sizeof(unsigned char) * BIT_ARRAY_BYTES << " байт" << endl;

    return 0;
}


